# 对于 Bochs 虚拟机 # 在打开虚拟机选择开始模拟后 # 要输入 c 才能够真正开始模拟 c=continue 


内核是 elf 格式的文件，也就是内核文件中有多余的东西，
然而之前的 mbr.bin 和 loader.bin 都是 二进制格式的文件 即 bin 类型的
其中并没有多余的 元信息

RAM 内存布局

1) kernel.bin 0x70000～0x9fbff => 0x2fbff=190KB字节的空间 
2) loader.bin => 0x900 处是loader.bin
3) 0x1500作为内核映像的入口地址
4) 内核的入口虚拟地址是0xc0001500


hd60M.img 的硬盘布局

1） MBR写在了硬盘的第0扇区，第1扇区是空着的
2） loader写在硬盘的第2扇区(0开始数的2)，由于loader.bin目前的大小
    是1342字节，占用3个扇区，所以第2～4扇区不能再用啦
3） kernel.bin 是选的第9扇区（要是起始为1的话算是第10个扇区）



1 dd 命令

dd if=./mbr.bin of=./hd60M.img bs=512 count=1 conv=notrunc
# The best way is using notrunc, which will not devide the file to many block.

1) 对于 mbr 而言默认就是应该存放在最开始的扇区
# dd if=~/Build-Your-Own-Operating-System/boot/mbr.bin 
# of=~/Build-Your-Own-Operating-System/hd60M.img bs=512 count=1 conv=notrunc
dd if=./boot/mbr.bin of=./hd60M.img bs=512 count=1 conv=notrunc

2) 对于 loader 而言是自己指定的地方 
dd if=./boot/loader.bin of=./hd60M.img bs=512 seek=2 count=1 conv=notrunc
dd if=./boot/loader.bin of=./hd60M.img bs=512 seek=2 count=4 conv=notrunc


# 各参数的意义
if=FILE # 从文件读取而不是从标准输入读取
        # if = input file
of=FILE # 向文件输出，而不是向标准输出输出
        # of = output file
bs=BYTES # bs = block size
conv=CONVS # conv = convert version
	   # notrunc
seek = 2 # 使用 seek 指明向硬盘写入属于的 LBA 逻辑块号
	 # seek 是从 0 开始数的
count=200 # 目的是一次往参数of指定的文件中写入200个扇区。
# dd命令会自己判断写入的数据量，如果参数if指定的文件体积小于count*bs(block size)，只按实际文件大小写入

2 nasm 命令

# 对于 mbr
nasm -I include/ -o mbr.bin mbr.S

# 对于 loader
nasm -I include/ -o loader.bin loader.S

# loader.S 是必须传入的一个参数，而 -o 后必须紧跟它对应的参数值
# 所以 loader.S 不论放在哪里都不会引起歧义
# -f 指明输出文件的格式，默认是 bin 格式喽 ~
# 还比如有 elf 和 elf64 


3 终端 Bochs 的运行
	使用 ctrl + c 来终端 bochs 的运行，再用 c 可以启动 bochs


4 RPL DPL CPL
RPL 是选择子中的  0~1 两位
CPL 是当前正在指当前正在执行的代码所处的代码段的 RPL
DPL 转移后的目标代码据段的DPL是将来处理器的当前特权级CPL 
